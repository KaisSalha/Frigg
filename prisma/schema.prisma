generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model action_events {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  batch_id        String    @db.Char(36)
  user_id         BigInt    @db.UnsignedBigInt
  name            String    @db.VarChar(255)
  actionable_type String    @db.VarChar(255)
  actionable_id   BigInt    @db.UnsignedBigInt
  target_type     String    @db.VarChar(255)
  target_id       BigInt    @db.UnsignedBigInt
  model_type      String    @db.VarChar(255)
  model_id        BigInt?   @db.UnsignedBigInt
  fields          String    @db.Text
  status          String    @default("running") @db.VarChar(25)
  exception       String    @db.Text
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  original        String?   @db.MediumText
  changes         String?   @db.MediumText

  @@index([actionable_type, actionable_id], name: "action_events_actionable_type_actionable_id_index")
  @@index([batch_id, model_type, model_id], name: "action_events_batch_id_model_type_model_id_index")
  @@index([user_id], name: "action_events_user_id_index")
}

model article_assets {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  article_id       BigInt @db.UnsignedBigInt
  asset_type_id    Int
  cdn_url          String    @db.VarChar(255)
  attrib_copyright String?   @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)


  article articles @relation(fields: [article_id], references: [id])

  @@index([article_id, asset_type_id], name: "article_assets_article_id_asset_type_id_index")
}

model articles {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  locale_id   Int
  slug        String    @db.VarChar(255)
  title       String    @db.VarChar(255)
  user_id     Int
  author_id   BigInt @db.UnsignedBigInt @default(1)
  category_id BigInt @db.UnsignedBigInt
  status_id   Int
  lead        String    @db.LongText
  body        String    @db.LongText
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)


  category categories @relation(fields: [category_id], references: [id])
  author authors @relation(fields: [author_id], references: [id])
  assets article_assets[]

  @@unique([locale_id, slug], name: "articles_locale_id_slug_unique")
  @@index([slug], name: "articles_slug_index")
}

model asset_types {
  id     BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name   String @unique @db.VarChar(255)
  slug   String @unique @db.VarChar(255)
  height Int
  width  Int
}

model authors {
  id    BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name  String  @db.VarChar(255)
  slug  String  @unique @db.VarChar(255)
  email String  @db.VarChar(255)
  bio   String? @db.Text

  articles articles[]
}

model categories {
  id          BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  locale_id   Int
  name        String @db.VarChar(255)
  slug        String @db.VarChar(255)
  banner_img  String @default("") @db.VarChar(255)
  description String @db.LongText

  article articles[]

  @@unique([locale_id, slug], name: "categories_locale_id_slug_unique")
  @@index([slug], name: "categories_slug_index")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model locales {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  ref  String @db.VarChar(255)
  name String @db.VarChar(255)

  @@index([ref], name: "locales_ref_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], name: "password_resets_email_index")
  @@ignore
}

model statuses {
  id   BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name String @db.VarChar(255)
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}
